// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Recommends similar artists and tracks based on a given track.
 *
 * - recommendSimilarTracks - A function that takes a track name and artist and returns recommendations.
 * - RecommendationsInput - The input type for the recommendSimilarTracks function.
 * - RecommendationsOutput - The return type for the recommendSimilarTracks function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendationsInputSchema = z.object({
  trackName: z.string().describe('The name of the track to find recommendations for.'),
  artist: z.string().describe('The artist of the track.'),
  listeningHistory: z
    .string()
    .optional()
    .describe(
      'Optional listening history of the user to personalize recommendations.'
    ),
});
export type RecommendationsInput = z.infer<typeof RecommendationsInputSchema>;

const RecommendationsOutputSchema = z.object({
  similarArtists: z.array(z.string()).describe('A list of similar artists.'),
  similarTracks: z.array(z.string()).describe('A list of similar tracks.'),
});
export type RecommendationsOutput = z.infer<typeof RecommendationsOutputSchema>;

export async function recommendSimilarTracks(
  input: RecommendationsInput
): Promise<RecommendationsOutput> {
  return recommendSimilarTracksFlow(input);
}

const prompt = ai.definePrompt({
  name: 'recommendSimilarTracksPrompt',
  input: {schema: RecommendationsInputSchema},
  output: {schema: RecommendationsOutputSchema},
  prompt: `You are a music expert. Based on the track "{{trackName}}" by {{artist}}, and the following listening history:
{{#if listeningHistory}}
  {{{listeningHistory}}}
{{else}}
  The user has no listening history.
{{/if}}

Recommend a list of artists and tracks that the user might like.  Do not include the input track or artist in the output.
`,
});

const recommendSimilarTracksFlow = ai.defineFlow(
  {
    name: 'recommendSimilarTracksFlow',
    inputSchema: RecommendationsInputSchema,
    outputSchema: RecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
